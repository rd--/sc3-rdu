diff --git a/Source/PluginProcessor.cpp b/Source/PluginProcessor.cpp
index 2f082e0..27d5275 100644
--- a/Source/PluginProcessor.cpp
+++ b/Source/PluginProcessor.cpp
@@ -25,6 +25,7 @@
 #include "PluginEditor.h"
 
 #include "Dexed.h"
+#include "msfa/dx7note.h" /* RD TUNING TABLE */
 #include "msfa/synth.h"
 #include "msfa/freqlut.h"
 #include "msfa/sin.h"
@@ -335,6 +336,9 @@ void DexedAudioProcessor::processMidiMessage(const MidiMessage *msg) {
                     controllers.foot_cc = value;
                     controllers.refresh();
                     break;
+                case 7: /* RD CC-VOL */
+                    this->ctrl[2]->publishValueAsync((float)value / 127);
+                    break;
                 case 64:
                     sustain = value > 63;
                     if (!sustain) {
@@ -505,13 +509,31 @@ void DexedAudioProcessor::handleIncomingMidiMessage(MidiInput* source, const Mid
 
     //TRACE("%X %X %X %X %X %X", buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], buf[6]);
 
-    if ( ! message.isSysEx() )
+    if ( ! message.isSysEx() ) {
+        TRACE("NOT SYSEX?: %d", buf[0]); /* RD WARN */
         return;
+    }
     
     // test if it is a Yamaha Sysex
     if ( buf[1] != 0x43 ) {
+        /* RD MTS NRT TUNING TABLE */
+        if ( sz == 408 && buf[1] == 0x7E && buf[3] == 0x08 && buf[4] == 0x01 ) {
+            TRACE("MTS NRT SYSEX: %d", buf[0]);
+            for(int i = 0; i < 128; i++ ) {
+                int j = 6 + 16 + (i * 3); /* 6 = HEADER , 16 = NAME */
+                int mnn = buf[j+0];
+                int c_msb = buf[j+1];
+                int c_lsb = buf[j+2];
+                int cents = float((c_msb << 7) | c_lsb) * (100.0 / 16383.0);
+                TRACE("TUNING: i=%d j=%d buf=%d,%d,%d mnn=%d cents=%d",
+                      i, j, buf[j], buf[j+1], buf[j+2], mnn, cents);
+                tuning_tbl_set(i,mnn,cents);
+            }
+            return;
+        } else {
         TRACE("not a yamaha sysex %d", buf[0]);
         return;
+        }
     }
     
     int substatus = buf[2] >> 4;
@@ -542,6 +564,15 @@ void DexedAudioProcessor::handleIncomingMidiMessage(MidiInput* source, const Mid
         }
     } else if ( substatus == 1 ) {
         // parameter change
+
+        /* RD DX7II MICROTUNE PARAMETER CHANGE */
+        if ( buf[3] == 24 && sz == 9) {
+           tuning_tbl_set(buf[5],buf[6],int8_t((float)buf[7] * (100.0 / 64.0)));
+           TRACE("dx7ii microtune: %d %d %d %f %d",
+                 buf[5],buf[6],buf[7],((float)buf[7] * (100.0 / 64.0)),sz);
+           return;
+        // voice parameter change
+        } else if ( buf[3] == 0 || buf[3] == 1) {
         if ( sz < 7 ) {
            TRACE("wrong single voice datasize %d", sz);
            return;
@@ -562,6 +593,7 @@ void DexedAudioProcessor::handleIncomingMidiMessage(MidiInput* source, const Mid
         } else {
             data[offset] = value;
         }
+        }
     } else {
         TRACE("unknown sysex substatus: %d", substatus);
     }
diff --git a/Source/msfa/dx7note.cc b/Source/msfa/dx7note.cc
index c74570e..d7a2e35 100644
--- a/Source/msfa/dx7note.cc
+++ b/Source/msfa/dx7note.cc
@@ -25,6 +25,20 @@
 
 const int FEEDBACK_BITDEPTH = 8;
 
+/* RD TUNING TABLE */
+struct midi_detune_t tuning_tbl[] = {{0,0},{1,0},{2,0},{3,0},{4,0},{5,0},{6,0},{7,0},{8,0},{9,0},{10,0},{11,0},{12,0},{13,0},{14,0},{15,0},{16,0},{17,0},{18,0},{19,0},{20,0},{21,0},{22,0},{23,0},{24,0},{25,0},{26,0},{27,0},{28,0},{29,0},{30,0},{31,0},{32,0},{33,0},{34,0},{35,0},{36,0},{37,0},{38,0},{39,0},{40,0},{41,0},{42,0},{43,0},{44,0},{45,0},{46,0},{47,0},{48,0},{49,0},{50,0},{51,0},{52,0},{53,0},{54,0},{55,0},{56,0},{57,0},{58,0},{59,0},{60,0},{61,0},{62,0},{63,0},{64,0},{65,0},{66,0},{67,0},{68,0},{69,0},{70,0},{71,0},{72,0},{73,0},{74,0},{75,0},{76,0},{77,0},{78,0},{79,0},{80,0},{81,0},{82,0},{83,0},{84,0},{85,0},{86,0},{87,0},{88,0},{89,0},{90,0},{91,0},{92,0},{93,0},{94,0},{95,0},{96,0},{97,0},{98,0},{99,0},{100,0},{101,0},{102,0},{103,0},{104,0},{105,0},{106,0},{107,0},{108,0},{109,0},{110,0},{111,0},{112,0},{113,0},{114,0},{115,0},{116,0},{117,0},{118,0},{119,0},{120,0},{121,0},{122,0},{123,0},{124,0},{125,0},{126,0},{127,0}};
+
+void tuning_tbl_set(int8_t k,int8_t d1,int8_t d2) {
+    tuning_tbl[k] = {d1,d2};
+}
+
+int32_t mididetune_to_logfreq(struct midi_detune_t m) {
+    const int base = 50857777;  // (1 << 24) * (log(440) / log(2) - 69/12)
+    const int step = (1 << 24) / 12;
+    const int c_step = (1 << 24) / 1200;
+    return base + ((int)(m.midinote) * step) + ((int)(m.cents) * c_step);
+}
+
 int32_t midinote_to_logfreq(int midinote) {
     const int base = 50857777;  // (1 << 24) * (log(440) / log(2) - 69/12)
     const int step = (1 << 24) / 12;
@@ -43,7 +57,8 @@ int32_t osc_freq(int midinote, int mode, int coarse, int fine, int detune) {
     // TODO: pitch randomization
     int32_t logfreq;
     if (mode == 0) {
-        logfreq = midinote_to_logfreq(midinote);
+        /* RD TUNING TABLE */
+        logfreq = mididetune_to_logfreq(tuning_tbl[midinote]);
         
         // could use more precision, closer enough for now. those numbers comes from my DX7
         double detuneRatio = 0.0209 * exp(-0.396 * (((float)logfreq)/(1<<24))) / 7;
diff --git a/Source/msfa/dx7note.h b/Source/msfa/dx7note.h
index 07d80f1..9783b8e 100644
--- a/Source/msfa/dx7note.h
+++ b/Source/msfa/dx7note.h
@@ -28,6 +28,10 @@
 #include "pitchenv.h"
 #include "fm_core.h"
 
+/* RD TUNING TABLE */
+struct midi_detune_t {int8_t midinote;int8_t cents;};
+void tuning_tbl_set(int8_t k,int8_t d1,int8_t d2);
+
 struct VoiceStatus {
     uint32_t amp[6];
     char ampStep[6];
